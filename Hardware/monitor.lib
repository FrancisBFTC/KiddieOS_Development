; ===============================================
; KiddieOS - Monitor Library Rotines
; Created by Francis
; Version 1.0.0
; ===============================================

%IFNDEF __MONITOR_LIB__
%DEFINE __MONITOR_LIB__

; Main Strings __________________________________
; _______________________________________________

NameSystem db "KiddieOS", 0

; _______________________________________________



; Monitor & Windows Configurations _________________________
; _______________________________________________


Count        dw 0000h
BackWidth    dw 0000h
BackHeight   dw 0000h
BackColor    db 46
Pagination   db 0
CursorX   	 db 15
CursorY      db 12
State        db 0

; _______________________________________________



; Rotine Library ________________________________
; _______________________________________________

; Definir o modo de vídeo e configura posição padrão
VGA.SetVideoMode:
	mov ah, 00h
	mov al, 13h
	int 10h
	mov ax, 320
	mov WORD[BackWidth], ax
	mov ax, 200
	mov WORD[BackHeight], ax
	call DrawPixelConfig
ret

; função de gravar pixels na tela
DrawPixelConfig:
	mov ah, 0Ch
	mov al, [BackColor]
	mov cx, 0
	mov dx, 0
ret

;Pinta o fundo da tela
DrawBackground:
	int 10h
	inc cx
	cmp cx, WORD[BackWidth]
	jne DrawBackground
	mov cx, 0
	inc dx
	cmp dx, WORD[BackHeight]
	jne DrawBackground
	mov dx, 0
ret

PrintString:
	mov ah, 09h
	mov bh, [Pagination]
	mov cx, 1
	mov al, [si]
	print:
		int 10h
		inc si
		call MoveCursor
		mov ah, 09h
		mov al, [si]
		cmp al, 0
		jne print
ret

MoveCursor:
	mov ah, 02h
	mov bh, [Pagination]
	inc dl
	int 10h
ret

EffectInit:
	mov bl, 44 
	start:
		mov dh, [CursorY]
		mov dl, [CursorX]
		call MoveCursor
		mov si, NameSystem
		call PrintString
		push bx
		mov bl, [State]
		cmp bl, 0
		je Increment
		jmp Decrement
	Increment:
		pop bx
		inc bl
		call Waiting
		cmp bl, 50
		jne start
		push bx
		mov bl, 1
		mov byte[State], bl
		pop bx
		jmp start
	Decrement:
		pop bx
		dec bl
		call Waiting
		cmp bl, 44
		jne start
		push bx               
		mov bl, 0
		mov byte[State], bl
		mov bx, [Count]
		inc bx
		mov WORD[Count], bx
		cmp bx, 10 
		jne ReturnLoop
		jmp ReturnProg
	ReturnLoop:
		pop bx
		jmp start
	ReturnProg:
		pop bx
ret

Waiting:
	pusha
	mov ah, 86h
	mov cx, 0000h    ; 150 milisegundos (150.000) cx = 0002h, dx = 49F0h
	mov dx, 0000h
	int 15h
	popa
ret

; _______________________________________________

%ENDIF