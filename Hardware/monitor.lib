; ===============================================
; KiddieOS - Monitor Library Rotines
; Created by Francis
; Version 1.0.0
; ===============================================

%IFNDEF __MONITOR_LIB__
%DEFINE __MONITOR_LIB__

; Main Strings __________________________________
; _______________________________________________

;NameSystem db "KiddieOS", 0

; _______________________________________________



; Monitor & Windows Configurations _________________________
; _______________________________________________


Count        dw 0000h
BackWidth    dw 0000h
BackHeight   dw 0000h
BackColor    db 30
Pagination   db 0
CursorCol    db 30
CursorRaw    db 12
State        db 0

; _______________________________________________



; Rotine Library ________________________________
; _______________________________________________

; Definir o modo de vídeo e configura posição padrão
VGA.SetVideoMode:
	mov 	ah, 00h
	mov 	al, 6Ah  	; <- (800 x 600) 16 cores = 6Ah
	;mov 	al, 12h    	; <- (640 x 480) 16 cores = 12h
	int 	10h
	mov 	ax, 800    ;640
	mov 	WORD[BackWidth], ax
	mov 	ax, 600    ;480
	mov 	WORD[BackHeight], ax
ret

SVGA.SetVideoMode:
	mov ax, 4F02h
	mov bx, 103h   	; <- (800 x 600) 256 cores = 103h
	;mov bx, 101h  	; <- (640 x 480) 256 cores = 101h
	int 10h
	mov ax, 800    ;640
	mov WORD[BackWidth], ax
	mov ax, 600    ;480
	mov WORD[BackHeight], ax
ret

;Pinta o fundo da tela
DrawBackground:
	mov ax, 0xA000
	mov es, ax
	mov dx, 03C4h ; dx = Registro de Indice
	mov ah, 0x01  ; Plano de bits azul
	mov al, 0x02  ; Indice = Map Mask
	out dx, ax    ; Escreve todos os planos de bits
	xor di, di
	mov ecx, ((800*600)/8)/4  ; = 60000 -> 15000 vezes
	mov eax, 0xFFFFFFFF  ; Escreva para cada 4 pixels
	;mov al, 0x02
	rep stosd            ; Preenche a tela
ret

PrintString:
	pusha
	mov ah, 09h
	mov bh, [Pagination]
	mov cx, 1
	mov al, [si]
	print:
		int 10h
		inc si
		call MoveCursor
		mov ah, 09h
		mov al, [si]
		cmp al, 0
		jne print
	popa
ret

MoveCursor:
	mov ah, 02h
	mov bh, [Pagination]
	inc dl
	int 10h
ret

EffectInit:
	mov bl, 44
	start:
		mov dh, byte[CursorRaw]
		mov dl, byte[CursorCol]
		call MoveCursor
		mov si, NameSystem
		call PrintString
		push bx
		mov bl, [State]
		cmp bl, 0
		je Increment
		jmp Decrement
	Increment:
		pop bx
		inc bl
		call Waiting
		cmp bl, 50
		jne start
		push bx
		mov bl, 1
		mov byte[State], bl
		pop bx
		jmp start
	Decrement:
		pop bx
		dec bl
		call Waiting
		cmp bl, 44
		jne start
		push bx               
		mov bl, 0
		mov byte[State], bl
		mov bx, [Count]
		inc bx
		mov WORD[Count], bx
		cmp bx, 10 
		jne ReturnLoop
		jmp ReturnProg
	ReturnLoop:
		pop bx
		jmp start
	ReturnProg:
		pop bx
ret

Waiting:
	pusha
	mov ah, 86h
	mov cx, 0001h    ; 150 milisegundos (150.000) cx = 0002h, dx = 49F0h
	mov dx, 24F8h
	int 15h
	popa
ret


LIB_Monitor32:

Print_String32:
	pushad
	push 	edx
	push 	ecx
	xor 	cx, cx
	xor 	eax, eax
	mov 	edi, 0xB8000
	mov 	dh, byte[CursorRaw]
	mov 	al, (80*2)
	mov 	cl, dh
	mul 	cl
	mov 	cl, byte[CursorCol]
	shl 	cl, 1
	add 	ax, cx
	add 	edi, eax
	pop 	ecx
	pop 	edx
Print_S:
    mov 	al,byte [ds:esi]
    mov 	byte [edi],al 
    inc 	edi 
    mov 	al, dl
    mov 	byte [edi],al 
	inc 	esi
	inc 	edi
	loop 	Print_S
	popad
	inc 	byte[CursorRaw]
iretd

; _______________________________________________

%ENDIF